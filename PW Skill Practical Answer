{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "811a7464-bdaa-42f8-8186-5153b91a6b8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Program for Sample Calculartor.Answer no 1.7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6ff76d84-f139-42e2-9a07-76ab2000c0a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is Function Add two number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c40ab0b7-415e-42d6-9989-94248938e632",
   "metadata": {},
   "outputs": [],
   "source": [
    "def add(x,y):\n",
    "    return x+y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f145829b-f98b-4607-baee-3d96a42431cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is function Subtracts Two number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3cbf4e41-ad63-4dec-9328-3ed5cee3edaa",
   "metadata": {},
   "outputs": [],
   "source": [
    "def subtract(x,y):\n",
    "    return x-y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e24a9d14-8a1f-45e5-a734-6d4e96a83a84",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is the frunction multiplies two number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8fd22a14-f2a4-46f2-a6fe-ac58a0d8505b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def multiply(x,y):\n",
    "     return x*y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7e09a707-e43a-4871-88f4-dc439e3a1e76",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is the function Devides two number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "513f99ed-4917-427c-ad33-eb9e346ea10a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def devide(x,y):\n",
    "    return x/y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "658292ba-70ef-465c-8fb1-e1bd55c53b8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "add(5,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "017f49b2-c3e4-484f-9544-81778a117b0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subtract(7,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "35252e4a-d818-41fa-a21f-22177a162f02",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "multiply(3,4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "0c148918-0c60-4f3b-9e31-f200ad0321c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.0"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "devide(25,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8ae2090b-6d4a-48ff-9b0a-a7becccbc484",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question no 1.8  Write a program to find the larger of the three pre-specified numbers using ternary operators.\n",
    "  #Pre-specified Numbers: The variables num1, num2, and num3 are set with the values you want to compare."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1950e670-ce05-476b-8a22-200d09924e0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pre-specified numbers\n",
    "num1 = 10 \n",
    "num2 = 20\n",
    "num3 = 25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "97510193-6617-4212-b11e-fabc2b5d18d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using ternary operators to find the largest of the three numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "82f498fc-de3c-4926-979f-99d4eeb04bf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "largest = num1 if (num1 > num2 and num1 > num3) else (num2 if num2 > num3 else num3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d75f39ed-a845-4823-8d4e-18fb8f630d6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The largest number among 10, 20, and 25 is 25\n"
     ]
    }
   ],
   "source": [
    "print(f\"The largest number among {num1}, {num2}, and {num3} is {largest}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "1a51fb88-e4e1-4b37-b473-41e2180c9758",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question no 1.9 Write a program to find the factors of a whole number using a while loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "68a7b3a9-13aa-42a4-8144-020874d2b81f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Factors of 38 are:\n",
      "1\n",
      "2\n",
      "19\n",
      "38\n"
     ]
    }
   ],
   "source": [
    "# Function to find and print the factors of a given number\n",
    "def find_factors(number):\n",
    "    # Start from 1 and go up to the number itself\n",
    "    divisor = 1\n",
    "    print(f\"Factors of {number} are:\")\n",
    "\n",
    "    # Use a while loop to find all factors\n",
    "    while divisor <= number:\n",
    "        if number % divisor == 0:\n",
    "            print(divisor)\n",
    "        divisor += 1\n",
    "\n",
    "# Example usage\n",
    "num = 38  # You can change this value to test with different numbers\n",
    "find_factors(num)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "64d28aa8-f900-40e4-a836-8c258bf54ff5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question no 1.10 Write a program to find the sum of all the positive numbers entered by the user. As soon as the user\n",
    "#enters a negative number, stop taking in any further input from the user and display the sum .\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "dfdde111-e5d5-48a4-8b2c-aa8adce55324",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a positive number (or a negative number to stop):  5\n",
      "Enter a positive number (or a negative number to stop):  5\n",
      "Enter a positive number (or a negative number to stop):  56\n",
      "Enter a positive number (or a negative number to stop):  6\n",
      "Enter a positive number (or a negative number to stop):  -3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The sum of all positive numbers entered is: 72.0\n"
     ]
    }
   ],
   "source": [
    "def sum_positive_numbers():\n",
    "    total_sum = 0\n",
    "\n",
    "    while True:\n",
    "        try:\n",
    "            # Take user input\n",
    "            number = float(input(\"Enter a positive number (or a negative number to stop): \"))\n",
    "\n",
    "            # Check if the number is negative\n",
    "            if number < 0:\n",
    "                break\n",
    "\n",
    "            # Add the positive number to the total sum\n",
    "            total_sum += number\n",
    "\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter a valid number.\")\n",
    "\n",
    "    print(f\"The sum of all positive numbers entered is: {total_sum}\")\n",
    "\n",
    "# Run the function\n",
    "sum_positive_numbers()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b9fb18df-f198-49b9-beed-8479df454835",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question no 1.11 Write a program to find prime numbers between 2 to 100 using nested for loops."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "8eb41ad9-47fc-4215-ab9d-db8706c6403b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Prime Number Definition: A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. This means it should only be divisible by 1 and itself.\n",
    "\n",
    "#Algorithm:\n",
    "\n",
    "#For each number in the range from 2 to 100, check if it is a prime number.\n",
    "#To determine if a number is prime, try dividing it by all numbers less than itself (up to its square root). If it is divisible by any of these numbers, it is not a prime."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "3fce6665-7f2c-4d7c-9e6e-4d2c211ad7e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prime numbers between 2 and 100 are:\n",
      "2\n",
      "3\n",
      "5\n",
      "7\n",
      "11\n",
      "13\n",
      "17\n",
      "19\n",
      "23\n",
      "29\n",
      "31\n",
      "37\n",
      "41\n",
      "43\n",
      "47\n",
      "53\n",
      "59\n",
      "61\n",
      "67\n",
      "71\n",
      "73\n",
      "79\n",
      "83\n",
      "89\n",
      "97\n"
     ]
    }
   ],
   "source": [
    "def find_primes(start, end):\n",
    "    print(f\"Prime numbers between {start} and {end} are:\")\n",
    "    \n",
    "    for num in range(start, end + 1):\n",
    "        if num > 1:  # Numbers less than or equal to 1 are not prime\n",
    "            is_prime = True\n",
    "            for i in range(2, int(num**0.5) + 1):\n",
    "                if num % i == 0:\n",
    "                    is_prime = False\n",
    "                    break\n",
    "            if is_prime:\n",
    "                print(num)\n",
    "\n",
    "# Call the function to find and print primes between 2 and 100\n",
    "find_primes(2, 100)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "f007065f-2495-4f8e-b646-35316416768d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ANswer of Question 1.12 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "773a6124-3a69-44e0-a7b8-bd983de15860",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the marks for subject 1:  75\n",
      "Enter the marks for subject 2:  45\n",
      "Enter the marks for subject 3:  48\n",
      "Enter the marks for subject 4:  43\n",
      "Enter the marks for subject 5:  78\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Marks obtained in the subjects are:\n",
      "Subject 1: 75.0\n",
      "Subject 2: 45.0\n",
      "Subject 3: 48.0\n",
      "Subject 4: 43.0\n",
      "Subject 5: 78.0\n",
      "\n",
      "Total Marks: 289.0\n",
      "Percentage: 57.80%\n",
      "Grade: C\n"
     ]
    }
   ],
   "source": [
    "def calculate_grade(percentage):\n",
    "    # Determine the grade based on the percentage\n",
    "    match percentage:\n",
    "        case _ if percentage > 85:\n",
    "            return 'A'\n",
    "        case _ if percentage >= 75:\n",
    "            return 'B'\n",
    "        case _ if percentage >= 50:\n",
    "            return 'C'\n",
    "        case _ if percentage > 30:\n",
    "            return 'd'\n",
    "        case _ if percentage < 30:\n",
    "            return 'Reappear'\n",
    "\n",
    "def main():\n",
    "    # Accept marks for 5 subjects\n",
    "    marks = []\n",
    "    subjects = 5\n",
    "    for i in range(subjects):\n",
    "        while True:\n",
    "            try:\n",
    "                mark = float(input(f\"Enter the marks for subject {i+1}: \"))\n",
    "                if mark < 0:\n",
    "                    print(\"Marks cannot be negative. Please enter a valid number.\")\n",
    "                else:\n",
    "                    marks.append(mark)\n",
    "                    break\n",
    "            except ValueError:\n",
    "                print(\"Invalid input. Please enter a valid number.\")\n",
    "    \n",
    "    # Display the marks\n",
    "    print(\"\\nMarks obtained in the subjects are:\")\n",
    "    for i, mark in enumerate(marks, start=1):\n",
    "        print(f\"Subject {i}: {mark}\")\n",
    "    \n",
    "    # Calculate the sum of marks\n",
    "    total_marks = sum(marks)\n",
    "    \n",
    "    # Calculate the percentage\n",
    "    percentage = total_marks / subjects\n",
    "    \n",
    "    # Display the total marks and percentage\n",
    "    print(f\"\\nTotal Marks: {total_marks}\")\n",
    "    print(f\"Percentage: {percentage:.2f}%\")\n",
    "    \n",
    "    # Find and display the grade\n",
    "    grade = calculate_grade(percentage)\n",
    "    print(f\"Grade: {grade}\")\n",
    "\n",
    "# Run the main function\n",
    "main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "859f73e9-59f5-4276-b912-b97245b9a231",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Question no 1.6. Write a program to display the appropriate message as per the color of signal(RED-Stop/Yellow-Stay/\n",
    "#Green-Go) at the road crossing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "de1883c5-6860-4621-87cc-009ed9b13c3c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the color of the signal (RED, YELLOW, GREEN):  red\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stop\n"
     ]
    }
   ],
   "source": [
    "def display_signal_message(signal_color):\n",
    "    match signal_color.lower():\n",
    "        case 'red':\n",
    "            return \"Stop\"\n",
    "        case 'yellow':\n",
    "            return \"Stay\"\n",
    "        case 'green':\n",
    "            return \"Go\"\n",
    "        case _:\n",
    "            return \"Invalid color. Please enter 'RED', 'YELLOW', or 'GREEN'.\"\n",
    "\n",
    "def main():\n",
    "    # Input the color of the signal\n",
    "    signal_color = input(\"Enter the color of the signal (RED, YELLOW, GREEN): \").strip()\n",
    "\n",
    "    # Get the appropriate message based on the signal color\n",
    "    message = display_signal_message(signal_color)\n",
    "\n",
    "    # Display the message\n",
    "    print(message)\n",
    "\n",
    "# Run the main function\n",
    "main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "2fd11171-aeff-431f-81b0-272678d6516c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question No 1.3 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "1b0f0cc7-6356-433b-945d-5c4ad7639d6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "name = [\"Mohan\", \"dash\", \"karam\", \"chandra\", \"gandhi\", \"Bapu\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "6e3c539d-8237-487d-8fe4-e39c6734b52e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# a)To insert an element at a specific index, you can use the insert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "cf450cde-3039-4bb7-8760-9406cc34d3ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "name.insert(0, \"freedomfighter\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "6285a30b-b554-49b5-be95-f0518bee39fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['freedomfighter', 'Mohan', 'dash', 'karam', 'chandra', 'gandhi', 'Bapu']\n"
     ]
    }
   ],
   "source": [
    "print(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ccaadb64-8472-484a-8575-597d0be1fbbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# b) Explanation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "0331d625-50da-4be6-a7c5-931c55cfcf15",
   "metadata": {},
   "outputs": [],
   "source": [
    "length1=len((name[-len(name)+1:-1:2]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "4fddb99f-de87-4ca7-8808-0cefe113f578",
   "metadata": {},
   "outputs": [],
   "source": [
    "length2=len((name[-len(name)+1:-1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "5b2c03dc-ac08-4f03-8da0-a923ebb71861",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "print(length1+length2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "0e4c88c4-b5cc-4e42-b603-f093bbdf6dbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "#c) Add two more elements [\"NetaJi\", \"Bose\"] at the end of the list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "9a8588a3-2d38-49ac-8125-95a284d91dc3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['freedomfighter', 'Mohan', 'dash', 'karam', 'chandra', 'gandhi', 'Bapu', 'NetaJi', 'Bose']\n"
     ]
    }
   ],
   "source": [
    "name.extend([\"NetaJi\", \"Bose\"])\n",
    "print(name)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "220ced9b-47e3-4414-a62d-c81654b0c992",
   "metadata": {},
   "outputs": [],
   "source": [
    "#d) Swap the first and last elements of the list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "1da20467-0379-4d7b-8957-a022aaf8ecfd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Mohan', 'dash', 'karam', 'chandra', 'gandi', 'Bapuji']\n"
     ]
    }
   ],
   "source": [
    "name = [\"Bapuji\", \"dash\", \"karam\", \"chandra\", \"gandi\", \"Mohan\"]\n",
    "temp = name[-1]  # Last element \"Mohan\"\n",
    "name[-1] = name[0]  # Last element is now \"Bapuji\"\n",
    "name[0] = temp  # First element is now \"Mohan\"\n",
    "print(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "c5ceee16-f573-43d1-b6cb-2f3f89927c6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question No 1.4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "a37e5f42-192f-4fb6-9e98-4b6c21d9a25b",
   "metadata": {},
   "outputs": [],
   "source": [
    "animal = ['Human', 'cat', 'mat', 'cat', 'rat', 'Human', 'Lion']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "9b5255f8-3300-4062-be39-4790c573556d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Count the occurrences of 'Human"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "94ae14d0-73e1-4045-803a-53064f14ecd2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "print(animal.count('Human'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "6e0d109d-f84b-40d9-a4e2-2743adb7e335",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Find the index of 'rat'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "35fc595e-dfa7-435a-99c2-b66242a5cde2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "print(animal.index('rat'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "e279b643-1923-4181-9572-fae8a5bb496b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Find the length of the list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "3c987bc1-8178-4493-9009-9c90c80df7b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    }
   ],
   "source": [
    "print(len(animal))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "337a3c41-0831-4442-a669-8520145eaa8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question no 1.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "8fa53236-63a1-43e2-bd93-0f449a2e6ddd",
   "metadata": {},
   "outputs": [],
   "source": [
    "tuple1 = (10, 20, \"Apple\", 3.4, 'a', [\"master\", \"ji\"], (\"sita\", \"geeta\", 22), [{\"roll_no\": 1}, {\"name\": \"Navneet\"}])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "b618a044-cc46-4781-9ef9-6ee5751b1953",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "print(len(tuple1))   #length of tuple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "20fe4a0c-249e-4af9-b477-437bf01abf9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Navneet\n"
     ]
    }
   ],
   "source": [
    "print(tuple1[-1][-1][\"name\"])   #last value of tuple associated with name.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "56e323c2-feff-4cbb-b2a0-456d09106527",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "print(tuple1[-1][0][\"roll_no\"])    #value of roll no in the tuple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "be2896bc-7e42-4b05-b334-14381be27995",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ji\n"
     ]
    }
   ],
   "source": [
    "print(tuple1[-3][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "169bcb84-5af6-48e7-be6d-bbb00281ad50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22\n"
     ]
    }
   ],
   "source": [
    "print(tuple1[-2][2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "382325d6-f83a-4a86-bc1f-99c89c5d50f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question No 1.13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "181c76f7-625b-42b1-a84c-cd2319140292",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the wavelength in nanometers (nm):  520\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The color corresponding to a wavelength of 520.0 nm is Green.\n"
     ]
    }
   ],
   "source": [
    "def get_color_from_wavelength(wavelength):\n",
    "    \"\"\"\n",
    "    This function takes a wavelength in nanometers (nm) and returns the corresponding color in the VIBGYOR spectrum.\n",
    "    \"\"\"\n",
    "    if 400 <= wavelength < 440:\n",
    "        return \"Violet\"\n",
    "    elif 440 <= wavelength < 460:\n",
    "        return \"Indigo\"\n",
    "    elif 460 <= wavelength < 500:\n",
    "        return \"Blue\"\n",
    "    elif 500 <= wavelength < 570:\n",
    "        return \"Green\"\n",
    "    elif 570 <= wavelength < 590:\n",
    "        return \"Yellow\"\n",
    "    elif 590 <= wavelength < 620:\n",
    "        return \"Orange\"\n",
    "    elif 620 <= wavelength <= 720:\n",
    "        return \"Red\"\n",
    "    else:\n",
    "        return \"Out of range\"\n",
    "\n",
    "def main():\n",
    "    # Input the wavelength from the user\n",
    "    try:\n",
    "        wavelength = float(input(\"Enter the wavelength in nanometers (nm): \"))\n",
    "        if wavelength < 0:\n",
    "            raise ValueError(\"Wavelength cannot be negative.\")\n",
    "        \n",
    "        color = get_color_from_wavelength(wavelength)\n",
    "        print(f\"The color corresponding to a wavelength of {wavelength} nm is {color}.\")\n",
    "    \n",
    "    except ValueError as e:\n",
    "        print(f\"Invalid input: {e}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "d484a1cd-ddda-4425-b847-d8653a156a6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question no 2 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "28720bf0-c457-4dcb-8739-90672c5486e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Information:\n",
      "Name: John Doe\n",
      "Age: 20\n",
      "Roll Number: S12345\n",
      "Name: Jane Smith\n",
      "Age: 22\n",
      "Roll Number: S67890\n",
      "\n",
      "Updated Information:\n",
      "Name: Johnathan Doe\n",
      "Age: 21\n",
      "Roll Number: S12345\n",
      "Name: Jane Smith\n",
      "Age: 22\n",
      "Roll Number: S54321\n"
     ]
    }
   ],
   "source": [
    "class Student:\n",
    "    def __init__(self, name, age, roll_number):\n",
    "        self.__name = name\n",
    "        self.__age = age\n",
    "        self.__roll_number = roll_number\n",
    "\n",
    "    # Getter for name\n",
    "    def get_name(self):\n",
    "        return self.__name\n",
    "\n",
    "    # Setter for name\n",
    "    def set_name(self, name):\n",
    "        self.__name = name\n",
    "\n",
    "    # Getter for age\n",
    "    def get_age(self):\n",
    "        return self.__age\n",
    "\n",
    "    # Setter for age\n",
    "    def set_age(self, age):\n",
    "        if age > 0:\n",
    "            self.__age = age\n",
    "        else:\n",
    "            print(\"Age must be a positive integer.\")\n",
    "\n",
    "    # Getter for roll number\n",
    "    def get_roll_number(self):\n",
    "        return self.__roll_number\n",
    "\n",
    "    # Setter for roll number\n",
    "    def set_roll_number(self, roll_number):\n",
    "        self.__roll_number = roll_number\n",
    "\n",
    "    # Method to display student information\n",
    "    def display_student_info(self):\n",
    "        print(f\"Name: {self.__name}\")\n",
    "        print(f\"Age: {self.__age}\")\n",
    "        print(f\"Roll Number: {self.__roll_number}\")\n",
    "\n",
    "    # Method to update student details\n",
    "    def update_details(self, name=None, age=None, roll_number=None):\n",
    "        if name is not None:\n",
    "            self.set_name(name)\n",
    "        if age is not None:\n",
    "            self.set_age(age)\n",
    "        if roll_number is not None:\n",
    "            self.set_roll_number(roll_number)\n",
    "\n",
    "# Example usage\n",
    "def main():\n",
    "    # Creating instances of the Student class\n",
    "    student1 = Student(\"John Doe\", 20, \"S12345\")\n",
    "    student2 = Student(\"Jane Smith\", 22, \"S67890\")\n",
    "\n",
    "    # Displaying initial student information\n",
    "    print(\"Initial Information:\")\n",
    "    student1.display_student_info()\n",
    "    student2.display_student_info()\n",
    "\n",
    "    # Updating student details\n",
    "    student1.update_details(name=\"Johnathan Doe\", age=21)\n",
    "    student2.update_details(roll_number=\"S54321\")\n",
    "\n",
    "    # Displaying updated student information\n",
    "    print(\"\\nUpdated Information:\")\n",
    "    student1.display_student_info()\n",
    "    student2.display_student_info()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "d5d5dc03-3aa8-4048-9337-0b37f2c2caf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#question no 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "2f0ea0c9-d39f-4452-967e-58db9ea3828e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You have successfully borrowed 'mere Dasta' by Zeeshan Alam.\n",
      "Sorry, 'mere Dasta' by Zeeshan Alam is currently unavailable.\n",
      "Thank you for returning 'mere Dasta' by Zeeshan Alam.\n",
      "'mere Dasta' by Zeeshan Alam was not borrowed.\n",
      "Is 'mere Dasta' available? Yes\n"
     ]
    }
   ],
   "source": [
    "class LibraryBook:\n",
    "    def __init__(self, book_name, author):\n",
    "        self.__book_name = book_name\n",
    "        self.__author = author\n",
    "        self.__availability_status = True  # True means the book is available\n",
    "\n",
    "    # Getter for book name\n",
    "    def get_book_name(self):\n",
    "        return self.__book_name\n",
    "\n",
    "    # Getter for author\n",
    "    def get_author(self):\n",
    "        return self.__author\n",
    "\n",
    "    # Getter for availability status\n",
    "    def is_available(self):\n",
    "        return self.__availability_status\n",
    "\n",
    "    # Method to borrow the book\n",
    "    def borrow_book(self):\n",
    "        if self.__availability_status:\n",
    "            self.__availability_status = False\n",
    "            return f\"You have successfully borrowed '{self.__book_name}' by {self.__author}.\"\n",
    "        else:\n",
    "            return f\"Sorry, '{self.__book_name}' by {self.__author} is currently unavailable.\"\n",
    "\n",
    "    # Method to return the book\n",
    "    def return_book(self):\n",
    "        if not self.__availability_status:\n",
    "            self.__availability_status = True\n",
    "            return f\"Thank you for returning '{self.__book_name}' by {self.__author}.\"\n",
    "        else:\n",
    "            return f\"'{self.__book_name}' by {self.__author} was not borrowed.\"\n",
    "\n",
    "# Test the LibraryBook class\n",
    "def main():\n",
    "    # Create instances of LibraryBook\n",
    "    book1 = LibraryBook(\"mere Dasta\", \"Zeeshan Alam\")\n",
    "    book2 = LibraryBook(\"My Problem never leave me\", \"majboor saklain\")\n",
    "\n",
    "    # Test borrowing books\n",
    "    print(book1.borrow_book())  # Should succeed\n",
    "    print(book1.borrow_book())  # Should indicate that the book is unavailable\n",
    "\n",
    "    # Test returning books\n",
    "    print(book1.return_book())  # Should succeed\n",
    "    print(book1.return_book())  # Should indicate that the book was not borrowed\n",
    "\n",
    "    # Test availability status\n",
    "    print(f\"Is '{book1.get_book_name()}' available? {'Yes' if book1.is_available() else 'No'}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "dd0e31b8-4f24-4fa9-9054-36e2a138a8f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question no 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "a1b13a35-1571-46d6-9fbe-e83bf4355a3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Base class\n",
    "class Animal:\n",
    "    def make_sound(self):\n",
    "        raise NotImplementedError(\"Subclass must implement abstract method\")\n",
    "\n",
    "# Subclass for Dog\n",
    "class Dog(Animal):\n",
    "    def make_sound(self):\n",
    "        return \"Woof\"\n",
    "\n",
    "# Subclass for Cat\n",
    "class Cat(Animal):\n",
    "    def make_sound(self):\n",
    "        return \"Meow\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "6557c50e-6288-491a-a938-c8aa0e266b67",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dog sound: Woof\n",
      "Cat sound: Meow\n"
     ]
    }
   ],
   "source": [
    "# Base class\n",
    "class Animal:\n",
    "    def make_sound(self):\n",
    "        raise NotImplementedError(\"Subclass must implement abstract method\")\n",
    "\n",
    "# Subclass for Dog\n",
    "class Dog(Animal):\n",
    "    def make_sound(self):\n",
    "        return \"Woof\"\n",
    "\n",
    "# Subclass for Cat\n",
    "class Cat(Animal):\n",
    "    def make_sound(self):\n",
    "        return \"Meow\"\n",
    "\n",
    "# Test the program\n",
    "def main():\n",
    "    # Create instances of Dog and Cat\n",
    "    dog = Dog()\n",
    "    cat = Cat()\n",
    "    \n",
    "    # Call make_sound() method and display the output\n",
    "    print(\"Dog sound:\", dog.make_sound())\n",
    "    print(\"Cat sound:\", cat.make_sound())\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "57b7c4d4-f6cc-4836-b6b7-b1534e201065",
   "metadata": {},
   "outputs": [],
   "source": [
    "#question no 6 "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
